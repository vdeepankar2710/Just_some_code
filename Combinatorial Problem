/*Problem Link:https://www.hackerrank.com/contests/codeagon/challenges/bob-and-subarray-or/problem*/

/* Description: Taking the contribution of each bit independently and then computing OR. Each time we see a 1 at bit position j in temp,
(say temp comes at ith iteration), 2^j is contributed i times to the sum (ans). This is because i subarrays are formed with this element and this takes care of the
subarrays formed by temp in the left of it and for the right part of it we take care for the element at the previously occured 1 as -:
Every 0 in temp at bit position j will contribute 2^j, idx[j] times to the sum,
because idx[j] tells the number of subarrays that temp will group with that has 1 set at j which has previously occured at position before temp.*/

/*solution*/
#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define MAX 100001
#define MOD 1000000007
// #define MOD 998244353
#define pb push_back
#define F first
#define S second
#define INF 2e18
#define PII pair<int,int>
#define PLL pair<long long, long long>

int idx[100];

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ll n; cin>>n;
    ll temp, ans=0;
    for(ll i=1; i<=n; i++)
    {
        cin>>temp;
        for(ll j=0; j<=32; j++)
        {
            ll pw = 1l<<j;
            if(temp & pw)
            {
                ans+= pw*i;
                idx[j] = i;
            }
            else if(idx[j])
            {
                ans+= idx[j]*pw;
            }
        }
    }
    cout<<ans<<endl;
    return 0;
}
