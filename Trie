#include<bits/stdc++.h>
using namespace std;
#define ll long long
#define ull unsigned long long
#define MAX 100001
#define MOD 1000000007
// #define MOD 998244353
#define pb push_back
#define F first
#define S second
#define INF 2e18
#define PII pair<int,int>
#define PLL pair<long long, long long>

const int N = 10*MAX;

struct Trie
{
	struct Trie * children[10] = {NULL};
	int vis = 0;	
};
bool insert(struct Trie *root,  string &s)
{
	struct Trie *pNode = root;
	
	for(int i=0; i<(int)s.length(); i++)
	{
		int in = s[i] - 'a';
		if(pNode->children[in] == NULL)
			pNode->children[in] = new Trie;
	    pNode = pNode->children[in];
	    
	    if(pNode->vis==1) // for large upcoming strings
	        return false;
	}
	pNode->vis = 1;
	for(int i=0; i<10; i++)
	{
	    if(pNode->children[i]!=NULL)
	    return false;
	}
	return true;
}

int main()
{
    int n; cin>>n;
    bool a = 1;
    struct Trie *root = new Trie;
    
    for(int i=0; i<n; i++)
    {
        string s; cin>>s;
        bool ans = insert(root, s);
        
        // cout<<ans<<endl;
        if(ans)     continue;
        else 
        {
            cout<<"BAD SET\n";
            cout<<s<<endl;
            a = 0;
            break;
        }
    }
    if(a)   cout<<"GOOD SET\n";
    return 0;
}

//Problem is-Given a set of strings we need to determine that a each string is not a prefix of any of the strings, then it a "GOOD SET" else it is a "BAD SET".
//Testcase - 4
//aab
//aac
//abcghgh
//aa
//verdict = "BAD SET"

//4
//aab
//aac
//aacghgh
//aabghgh
//verdict="GOOD SET"


************************************************************************************************************************************************************************
// Another problem = count the number of pairs whose XOR is less than a given number k
const int N = 100*MAX;

struct Trie
{
	Trie *child[2];
	int cnt=0;
	Trie()
	{
		child[1] = child[0] = NULL;
	}
};
void insert(Trie *root, int element)
{
	for(int i=32; i>=0; i--) //we build the Trie by looking at the number from the most significant bit (rightmost bit)
	{
		bool x = element&(1<<i);
		if(!root->child[x])
		{
			root->child[x] = new Trie();
			root->child[x]->cnt++;
		}
		root = root->child[x];
	}
}
int cntSmaller(Trie *root, int ele, int k)
{
	int cntSmall=0;
	for(int i=32; i>=0 && root; i--)
	{
		bool x = ele&(1<<i);
		bool y = k&(1<<i);
		if(y)
		{
			if(root->child[x])
			{
				cntSmall += (root->child[x]->cnt);
				
			}
			root = root->child[x^1];   // to avoid repetitions in counting
		}
		else
		{
			root = root->child[x];
		}
	}
	return cntSmall;
}
int final(vector<int>arr, int n, int k)
{
	int ans=0;
	Trie *root = new Trie();
	for(int i=0; i<n; i++)
	{
		ans += cntSmaller(root, arr[i], k);
		insert(root, arr[i]);
	}
	return ans;
}
//  Here will be the main function
-------------------------------------------------------------------------------------------------------------------------------------------------------

//Problem- Compute the max xor of a pair of elements in an array
// othekey is the other number already inserted in the trie taking with whom the XOR is max
typedef struct Trie
{
	struct Trie *child[2];
	Trie()
	{
		child[1] = child[0] = NULL;
	}
} TrieNode;

void insert(TrieNode *root, int key)
{
	TrieNode *pNode = root;
	 
	for(int i=32; i>=0; i--)
	{
		bool bit = key&(1<<i);
		if(!pNode->child[bit])
			pNode->child[bit] = new TrieNode;
			
		pNode = pNode->child[bit];
	}
}
int query(TrieNode *root, int key, int &otherkey)
{
	int XOR = 0;
	TrieNode *pNode = root;
	
	for(int i=32; i>=0; i--)
	{
		bool bit = key&(1<<i);
		if(pNode->child[!bit])
		{
			XOR |= (1<<i);
			if(!bit)	otherkey |= (1<<i);
			else otherkey &= ~(1<<i);
			
			pNode = pNode->child[!bit];
		}
		else
		{
			if(bit)	otherkey |= (1<<i);
			else otherkey &= ~(1<<i);	
			pNode= pNode->child[bit];		
		}
	}
	return XOR;
}

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);  //remove in interactive problems
	int t; cin>>t;
	while(t--)
	{
		int n; cin>>n;
		int a[n];
		for(int i=0; i<n; i++)
			cin>>a[i];
		
		TrieNode *root = new TrieNode;
		
		int maxx=-1;
		insert(root,a[0]);
		
		for(int i=1; i<n; i++)
		{
			int otherkey=0;
			int q = query(root, a[i], otherkey) ;
			
			if(q > maxx)		maxx= q;
			
			insert(root, a[i]);
		}
		cout<<maxx<<endl;
		
		
	}

	return 0;
}

